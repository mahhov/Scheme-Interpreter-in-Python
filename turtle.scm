;;;(fd n)
;;;(bk n)
;;;(lt n)
;;;(rt n)
;;;(circle rev_ang extent)
;;;(goto x, y)
;;;(seth h)
;;;(pu)
;;;(pd)
;;;(st)
;;;(ht)
;;;(clear)
;;;(color c) #ffc0c0
;;;(begin_fill)
;;;(end_fill)
;;;(exitonclick)
;;;(speed head_rad)

(speed 0)

(define (repeat n func)
	(if (= n 0)
		nil
		(begin (func) (repeat (- n 1) func))
	)
)

(define ang 20)
(define back_ang 40)
(define rev_ang (- 90 ang)) ;70
(define ang_both (+ back_ang ang)) ;60
(define big_back_ang (* 2 (- 90 back_ang))) ;100

(define (turtle rad)
	(define head_rad (/ rad -2))
	(define leg_rad (/ rad -3))
	(circle rad ang)
	(circle leg_rad)
	(circle rad rev_ang)
	(circle head_rad)
	(circle rad rev_ang)
	(circle leg_rad)
	(circle rad ang_both)
	(circle leg_rad)
	(circle rad big_back_ang)
	(circle leg_rad)
	(circle rad back_ang)
)

(define (icircle rad ang) (pu)(circle rad ang)(pd))

(define (turtle_circle rad)
	(define head_rad (/ rad -2))
	(define leg_rad (/ rad -3))
	(icircle rad ang)
	(turtle leg_rad)
	(icircle rad rev_ang)
	(turtle head_rad)
	(icircle rad rev_ang)
	(turtle leg_rad)
	(icircle rad ang_both)
	(turtle leg_rad)
	(icircle rad big_back_ang)
	(turtle leg_rad)
	(icircle rad back_ang)
)

(define (draw rad n)
	(if (= n 0)
		(turtle_circle rad)
		(begin
			(define m (- n 1))
			(define head_rad (/ rad -2))
			(define leg_rad (/ rad -3))
			(icircle rad ang)
			(draw leg_rad m)
			(icircle rad rev_ang)
			(draw head_rad m)
				(rt 90)
				(draw (/ rad -5) m)
				(lt 90)
			(icircle rad rev_ang)
			(draw leg_rad m)
			(icircle rad ang_both)
			(draw leg_rad m)
			(icircle rad big_back_ang)
			(draw leg_rad m)
			(icircle rad back_ang)
		)
	)
)

(define (parent)
	(draw 100 1)
)

(parent)

(exitonclick)